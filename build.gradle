plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neoGradle}"
    //id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
    id 'net.neoforged.gradle.neoform' version "${neoGradle}"
}

version = mod_version
group = mod_group_id

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

base {
    archivesName = mod_id
}

minecraft {
//    accessTransformers {
//        file('src/main/resources/META-INF/accesstransformer.cfg')
//    }
    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            systemProperty 'forge.logging.console.level', 'debug'

            modSource project.sourceSets.main
        }

        client {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
            //programArgument '--nogui'
        }
        gameTestServer {
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        url = "https://maven.theillusivec4.top/"
        content {
            includeGroup "top.theillusivec4.curios"
        }
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoVersion}"
    implementation "net.minecraft:neoform_joined:${neoForm}"
    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curiosVersion}"
    compileOnly "top.theillusivec4.curios:curios-neoforge:${curiosVersion}:api"
    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraftVersion}:${geckoLibVersion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraftVersion,
            minecraft_version_range: minecraftVersionRange,
            neo_version            : neoVersion,
            neo_version_range      : neoVersionRange,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties
    }
}
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

